Only in lib/python2.7/site-packages/flask_restless: helpers.pyc
Only in lib/python2.7/site-packages/flask_restless: __init__.pyc
diff -crB lib/python2.7/site-packages/flask_restless/manager.py lib/python2.7/site-packages/flask_restless2/manager.py
*** lib/python2.7/site-packages/flask_restless/manager.py	2013-02-02 15:00:45.000000000 -0500
--- lib/python2.7/site-packages/flask_restless2/manager.py	2013-02-02 15:01:25.746406976 -0500
***************
*** 193,199 ****
                               exclude_columns=None, include_columns=None,
                               validation_exceptions=None, results_per_page=10,
                               max_results_per_page=100,
!                              post_form_preprocessor=None):
          """Creates an returns a ReSTful API interface as a blueprint, but does
          not register it on any :class:`flask.Flask` application.
  
--- 193,200 ----
                               exclude_columns=None, include_columns=None,
                               validation_exceptions=None, results_per_page=10,
                               max_results_per_page=100,
!                              post_form_preprocessor=None,
!                              put_form_preprocessor=None):
          """Creates an returns a ReSTful API interface as a blueprint, but does
          not register it on any :class:`flask.Flask` application.
  
***************
*** 366,372 ****
                                 authentication_function, exclude_columns,
                                 include_columns, validation_exceptions,
                                 results_per_page, max_results_per_page,
!                                post_form_preprocessor)
          # suffix an integer to apiname according to already existing blueprints
          blueprintname = self._next_blueprint_name(apiname)
          # add the URL rules to the blueprint: the first is for methods on the
--- 367,373 ----
                                 authentication_function, exclude_columns,
                                 include_columns, validation_exceptions,
                                 results_per_page, max_results_per_page,
!                                post_form_preprocessor, put_form_preprocessor)
          # suffix an integer to apiname according to already existing blueprints
          blueprintname = self._next_blueprint_name(apiname)
          # add the URL rules to the blueprint: the first is for methods on the
Only in lib/python2.7/site-packages/flask_restless: manager.pyc
diff -crB lib/python2.7/site-packages/flask_restless/search.py lib/python2.7/site-packages/flask_restless2/search.py
*** lib/python2.7/site-packages/flask_restless/search.py	2013-02-02 15:00:45.000000000 -0500
--- lib/python2.7/site-packages/flask_restless2/search.py	2013-02-02 15:01:25.746406976 -0500
***************
*** 156,161 ****
--- 156,228 ----
          otherfield = dictionary.get('field')
          return Filter(fieldname, operator, argument, otherfield)
  
+ class Disjunction(object):
+     """Represents a disjunction to apply to a SQL query.
+ 
+     A disjunction can be, for example, a comparison operator applied to a field of a
+     model and a value or a comparison applied to two fields of the same
+     model. For more information on possible disjunctions, see :ref:`search`.
+ 
+     """
+ 
+     def __init__(self, fieldname, operator, argument=None, otherfield=None):
+         """Instantiates this object with the specified attributes.
+ 
+         `fieldname` is the name of the field of a model which will be on the
+         left side of the operator.
+ 
+         `operator` is the string representation of an operator to apply. The
+         full list of recognized operators can be found at :ref:`search`.
+ 
+         If `argument` is specified, it is the value to place on the right side
+         of the operator. If `otherfield` is specified, that field on the model
+         will be placed on the right side of the operator.
+ 
+         .. admonition:: About `argument` and `otherfield`
+ 
+            Some operators don't need either argument and some need exactly one.
+            However, this constructor will not raise any errors or otherwise
+            inform you of which situation you are in; it is basically just a
+            named tuple. Calling code must handle errors caused by missing
+            required arguments.
+ 
+         """
+         self.fieldname = fieldname
+         self.operator = operator
+         self.argument = argument
+         self.otherfield = otherfield
+ 
+     def __repr__(self):
+         """Returns a string representation of this object."""
+         return '<Disjunction {} {} {}>'.format(self.fieldname, self.operator,
+                                           self.argument or self.otherfield)
+ 
+     @staticmethod
+     def from_dictionary(dictionary):
+         """Returns a new :class:`Disjunction` object with arguments parsed from
+         `dictionary`.
+ 
+         `dictionary` is a dictionary of the form::
+ 
+             {'name': 'age', 'op': 'lt', 'val': 20}
+ 
+         or::
+ 
+             {'name': 'age', 'op': 'lt', 'other': height}
+ 
+         where ``dictionary['name']`` is the name of the field of the model on
+         which to apply the operator, ``dictionary['op']`` is the name of the
+         operator to apply, ``dictionary['val']`` is the value on the right to
+         which the operator will be applied, and ``dictionary['other']`` is the
+         name of the other field of the model to which the operator will be
+         applied.
+ 
+         """
+         fieldname = dictionary.get('name')
+         operator = dictionary.get('op')
+         argument = dictionary.get('val')
+         otherfield = dictionary.get('field')
+         return Disjunction(fieldname, operator, argument, otherfield)
  
  class SearchParameters(object):
      """Aggregates the parameters for a search, including filters, search type,
***************
*** 163,169 ****
  
      """
  
!     def __init__(self, filters=None, limit=None, offset=None, order_by=None):
          """Instantiates this object with the specified attributes.
  
          `filters` is a list of :class:`Filter` objects, representing filters to
--- 230,236 ----
  
      """
  
!     def __init__(self, filters=None, disjunctions=None, limit=None, offset=None, order_by=None):
          """Instantiates this object with the specified attributes.
  
          `filters` is a list of :class:`Filter` objects, representing filters to
***************
*** 180,194 ****
          search.
  
          """
          self.filters = filters or []
          self.limit = limit
          self.offset = offset
          self.order_by = order_by or []
  
      def __repr__(self):
          """Returns a string representation of the search parameters."""
!         return ('<SearchParameters filters={}, order_by={}, limit={},'
!                 ' offset={}>').format(self.filters, self.order_by, self.limit,
                                        self.offset)
  
      @staticmethod
--- 247,268 ----
          search.
  
          """
+ 
+         """ Patch restless SearchParameters object to
+         always exclude is_deleted rows.
+     
+         """
          self.filters = filters or []
+         self.disjunctions = disjunctions or []
+         self.filters.append(Filter("is_deleted", "neq", 1))
          self.limit = limit
          self.offset = offset
          self.order_by = order_by or []
  
      def __repr__(self):
          """Returns a string representation of the search parameters."""
!         return ('<SearchParameters filters={}, disjunctions={}, order_by={}, limit={},'
!                 ' offset={}>').format(self.filters, self.disjunctions, self.order_by, self.limit,
                                        self.offset)
  
      @staticmethod
***************
*** 219,224 ****
--- 293,300 ----
          # for the sake of brevity...
          from_dict = Filter.from_dictionary
          filters = [from_dict(f) for f in dictionary.get('filters', [])]
+         from_dict = Disjunction.from_dictionary
+         disjunctions = [from_dict(f) for f in dictionary.get('disjunctions', [])]
          # HACK In Python 2.5, unicode dictionary keys are not allowed.
          order_by_list = dictionary.get('order_by', [])
          order_by_list = (unicode_keys_to_strings(o) for o in order_by_list)
***************
*** 226,232 ****
          limit = dictionary.get('limit')
          offset = dictionary.get('offset')
          return SearchParameters(filters=filters, limit=limit, offset=offset,
!                                 order_by=order_by)
  
  
  class QueryBuilder(object):
--- 302,308 ----
          limit = dictionary.get('limit')
          offset = dictionary.get('offset')
          return SearchParameters(filters=filters, limit=limit, offset=offset,
!                                 order_by=order_by, disjunctions=disjunctions)
  
  
  class QueryBuilder(object):
***************
*** 329,334 ****
--- 405,470 ----
          return filters
  
      @staticmethod
+     def _create_disjunctions(model, search_params):
+         """Returns the list of operations on `model` specified in the
+         :attr:`disjunctions` attribute on the `search_params` object.
+ 
+         `search-params` is an instance of the :class:`SearchParameters` class
+         whose fields represent the parameters of the search.
+ 
+         Raises one of :exc:`AttributeError`, :exc:`KeyError`, or
+         :exc:`TypeError` if there is a problem creating the query. See the
+         documentation for :func:`_create_operation` for more information.
+ 
+         """
+         disjunctions = []
+         for disj in search_params.disjunctions:
+             fname = disj.fieldname
+             val = disj.argument
+             # get the relationship from the field name, if it exists
+             relation = None
+             if '__' in fname:
+                 relation, fname = fname.split('__')
+             # get the other field to which to compare, if it exists
+             if disj.otherfield:
+                 val = getattr(model, disj.otherfield)
+             # for the sake of brevity...
+             create_op = QueryBuilder._create_operation
+             param = create_op(model, fname, disj.operator, val, relation)
+             disjunctions.append(param)
+         return disjunctions
+ 
+     @staticmethod
+     def _create_disjunctions(model, search_params):
+         """Returns the list of operations on `model` specified in the
+         :attr:`disjunctions` attribute on the `search_params` object.
+ 
+         `search-params` is an instance of the :class:`SearchParameters` class
+         whose fields represent the parameters of the search.
+ 
+         Raises one of :exc:`AttributeError`, :exc:`KeyError`, or
+         :exc:`TypeError` if there is a problem creating the query. See the
+         documentation for :func:`_create_operation` for more information.
+ 
+         """
+         disjunctions = []
+         for disj in search_params.disjunctions:
+             fname = disj.fieldname
+             val = disj.argument
+             # get the relationship from the field name, if it exists
+             relation = None
+             if '__' in fname:
+                 relation, fname = fname.split('__')
+             # get the other field to which to compare, if it exists
+             if disj.otherfield:
+                 val = getattr(model, disj.otherfield)
+             # for the sake of brevity...
+             create_op = QueryBuilder._create_operation
+             param = create_op(model, fname, disj.operator, val, relation)
+             disjunctions.append(param)
+         return disjunctions
+ 
+     @staticmethod
      def create_query(session, model, search_params):
          """Builds an SQLAlchemy query instance based on the search parameters
          present in ``search_params``, an instance of :class:`SearchParameters`.
***************
*** 356,364 ****
--- 492,508 ----
          query = session.query(model)
          # may raise exception here
          filters = QueryBuilder._create_filters(model, search_params)
+         disjunctions = QueryBuilder._create_disjunctions(model, search_params)
          for filt in filters:
              query = query.filter(filt)
  
+         if disjunctions:
+             query = session.query(model).filter(disjunctions[0])
+ 
+         for disj in disjunctions:
+             q = session.query(model).filter(disj)
+             query = query.union(q)
+ 
          # Order the search
          for val in search_params.order_by:
              field = getattr(model, val.field)
Only in lib/python2.7/site-packages/flask_restless: search.pyc
diff -crB lib/python2.7/site-packages/flask_restless/views.py lib/python2.7/site-packages/flask_restless2/views.py
*** lib/python2.7/site-packages/flask_restless/views.py	2013-02-02 15:00:45.000000000 -0500
--- lib/python2.7/site-packages/flask_restless2/views.py	2013-02-02 15:01:25.750406976 -0500
***************
*** 463,469 ****
                   authentication_function=None, exclude_columns=None,
                   include_columns=None, validation_exceptions=None,
                   results_per_page=10, max_results_per_page=100,
!                  post_form_preprocessor=None, *args, **kw):
          """Instantiates this view with the specified attributes.
  
          `session` is the SQLAlchemy session in which all database transactions
--- 463,469 ----
                   authentication_function=None, exclude_columns=None,
                   include_columns=None, validation_exceptions=None,
                   results_per_page=10, max_results_per_page=100,
!                  post_form_preprocessor=None, put_form_preprocessor=None, *args, **kw):
          """Instantiates this view with the specified attributes.
  
          `session` is the SQLAlchemy session in which all database transactions
***************
*** 562,567 ****
--- 562,568 ----
          self.results_per_page = results_per_page
          self.max_results_per_page = max_results_per_page
          self.post_form_preprocessor = post_form_preprocessor
+         self.put_form_preprocessor = put_form_preprocessor
  
      def _add_to_relation(self, query, relationname, toadd=None):
          """Adds a new or existing related model to each model specified by
***************
*** 1025,1042 ****
          return jsonify(result)
  
      def delete(self, instid):
-         """Removes the specified instance of the model with the specified name
-         from the database.
- 
-         Since :http:method:`delete` is an idempotent method according to the
-         :rfc:`2616`, this method responds with :http:status:`204` regardless of
-         whether an object was deleted.
- 
-         """
          self._check_authentication()
          inst = self._get_by(instid)
          if inst is not None:
!             self.session.delete(inst)
              self.session.commit()
          return jsonify_status_code(204)
  
--- 1025,1034 ----
          return jsonify(result)
  
      def delete(self, instid):
          self._check_authentication()
          inst = self._get_by(instid)
          if inst is not None:
!             inst.is_deleted = True
              self.session.commit()
          return jsonify_status_code(204)
  
***************
*** 1147,1152 ****
--- 1139,1147 ----
              return jsonify_status_code(400, message='Unable to decode data')
          # Check for any request parameter naming a column which does not exist
          # on the current model.
+         if self.put_form_preprocessor:
+             data = self.put_form_preprocessor(data, instid)
+ 
          for field in data:
              if not hasattr(self.model, field):
                  msg = "Model does not have field '%s'" % field
Only in lib/python2.7/site-packages/flask_restless: views.pyc
